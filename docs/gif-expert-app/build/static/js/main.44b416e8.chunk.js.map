{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","shared/const.js","shared/contructorUrlGiphy.js","shared/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","id","value","onChange","target","autoComplete","type","GifGridItem","gif","className","alt","title","src","url","width","height","Const","getUrlSearchGif","category","params","getCompleteUrlGiphy","encodeURI","getFechGifs","a","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","gifsList","contentDom","push","renderGifsList","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNA+BeA,EA5BK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAWzC,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAAIR,EAAeE,IAGlD,UACI,uBACIO,GAAG,gBACHC,MAAQR,EACRS,SAZmB,SAACN,GAAD,OAAOF,EAAeE,EAAEO,OAAOF,QAalDG,aAAa,QAEjB,wBAAQC,KAAK,SAAb,qCCFGC,EAjBK,SAAC,GAAW,IAAVC,EAAS,EAATA,IAClB,OACQ,qBACIC,UAAU,0CACVC,IAAKF,EAAIG,MACTC,IAAKJ,EAAIK,IACTF,MAAOH,EAAIG,MACXG,MAAM,MACNC,OAAO,S,uBCXVC,EACI,mCADJA,EAEO,uCCEPC,EAAkB,SAAEC,GAAF,OAFH,SAACL,GAAD,IAAMM,EAAN,uDAAe,GAAf,gBAA0BN,EAA1B,YAAiCM,EAAjC,oBAAmDH,GAEhCI,CAAqBJ,EAAF,YAA8BK,UAAUH,GAAxC,cCFrDI,EAAW,uCAAG,WAAQJ,GAAR,qBAAAK,EAAA,sEACJC,MAAMP,EAAgBC,IADlB,cACjBO,EADiB,gBAEAA,EAAKC,OAFL,uBAEfC,EAFe,EAEfA,KAEFC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CAAE5B,GADoC,EAAxBA,GACRU,MADgC,EAApBA,MACLE,IADyB,EAAbiB,OACAC,iBAAiBlB,QAL9B,kBAQhBe,GARgB,2CAAH,sDCuCTI,EApCC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAEdzB,mBAAS,CAC/BkC,KAAM,GACNM,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WACND,EAAU,CAAER,KAAM,GAAIM,SAAS,IAC/BX,EAAaJ,GAAWmB,MAAM,SAACT,GAC3BU,YAAW,WACPH,EAAS,CACLR,KAAMC,EACNK,SAAS,MAEd,UAER,CAACf,IAEGgB,EDf6BK,CAAcrB,GAApCsB,EAFgB,EAEtBb,KAAgBM,EAFM,EAENA,QAkBxB,OACI,qCACI,qBAAIxB,UAAU,mDAAd,cAAmES,EAAnE,OACA,qBAAKT,UAAU,kBAAf,SAnBe,WACnB,IAAIgC,EAAa,GAYjB,OAVIR,EACAQ,EAAc,+CACc,IAApBD,EAASxC,OACjByC,EAAc,+DAEdD,EAASX,KAAI,SAAArB,GACT,OAAOiC,EAAWC,KAAO,cAAC,EAAD,CAA0BlC,IAAKA,GAAbA,EAAIP,QAIhDwC,EAQKE,SEFLC,EAxBM,WAEjB,IAFwB,EAIYnD,mBAFN,CAAC,SAAU,YAAa,uBAF9B,mBAIjBoD,EAJiB,KAILrD,EAJK,KAUxB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cARK,SAAE0B,GACxB1B,EAAc,CAAE0B,GAAH,mBAAgB2B,QAQzB,6BAEQA,EAAWhB,KAAK,SAAAX,GAAQ,OAAO,cAAC,EAAD,CAA0BA,SAAUA,GAArBA,YChBlE4B,IAASC,OACP,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.44b416e8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleChangeInputValue = (e) => setInputValue( e.target.value );\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) setCategories( inputValue );\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                id=\"inputCategory\"\r\n                value={ inputValue }\r\n                onChange={ handleChangeInputValue }\r\n                autoComplete=\"off\"\r\n            />\r\n            <button type=\"submit\" >AÃ±adir categoria</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({gif}) => {\r\n    return (\r\n            <img\r\n                className=\"animate__animated animate__jackInTheBox\"\r\n                alt={gif.title}\r\n                src={gif.url}\r\n                title={gif.title}\r\n                width=\"150\"\r\n                height=\"150\"\r\n            />\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    gif : PropTypes.object.isRequired,\r\n}\r\n\r\nexport default GifGridItem\r\n","export const Const = {\r\n    apiKeyGiphy: 'lKtGhRtwUQGlk19yqRfHsra1tDT83CnK',\r\n    urlSearchGiphy: 'https://api.giphy.com/v1/gifs/search'\r\n}","import { Const } from \"./const\";\r\n\r\nconst getCompleteUrlGiphy = (url, params = '') =>  `${url}?${params}&api_key=${Const.apiKeyGiphy}`;\r\n\r\nexport const getUrlSearchGif = ( category ) => getCompleteUrlGiphy( Const.urlSearchGiphy, `q=${ encodeURI(category) }&limit=5` );","import { getUrlSearchGif } from \"./contructorUrlGiphy\";\r\n\r\nexport const getFechGifs = async ( category ) => {\r\n    const resp = await fetch(getUrlSearchGif(category));\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(({ id, title, images }) => {\r\n        return { id, title, url: images.downsized_medium.url };\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: gifsList, loading } = useFetchGifs( category );\r\n\r\n    const renderGifsList = () => {\r\n        let contentDom = [];\r\n\r\n        if( loading ) {\r\n            contentDom = (<span>Cargando...</span>)\r\n        } else if ( gifsList.length === 0 ) {\r\n            contentDom = (<span>No hemos encontrado nada...</span>);\r\n        } else {\r\n            gifsList.map(gif => {\r\n                return contentDom.push( (<GifGridItem key={gif.id} gif={gif} />) );\r\n            })\r\n        }\r\n\r\n        return contentDom;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"gifGrid__title animate__animated animate__fadeIn\"> {category} </h1>\r\n            <div className=\"gifGrid__bloque\" >\r\n                {\r\n                    renderGifsList()\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from 'react'\r\nimport { getFechGifs } from \"../shared/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState( { data: [], loading: true } );\r\n        getFechGifs( category ).then( (gifs) => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: gifs,\r\n                    loading: false\r\n                })\r\n            }, 2000);\r\n        })\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n};","import React, { useState } from 'react';\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>  {\r\n\r\n    const categoriesListDefault = ['Batman', 'Daredevil', 'Ultimate Spiderman'];\r\n\r\n    const [categories, setCategories] = useState( categoriesListDefault );\r\n\r\n    const handleAddCategory = ( category ) => {\r\n        setCategories( [category, ...categories] );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={ handleAddCategory } />\r\n            <ol>\r\n                {\r\n                    categories.map( category =>  ( <GifGrid key={ category } category={category} /> )  )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />, document.getElementById('root')\n);\n"],"sourceRoot":""}